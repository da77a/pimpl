[section On-Stack Implementation Policy]

 ...
 struct OnStack : boost::impl_ptr<OnStack, impl_ptr_policy::onstack, int[16]> { ... };

Then ['OnStack] could be used no differently from other ['Pimpl]-based classes:

 OnStack s11 (3); BOOST_TEST(s11.value() == 3);
 OnStack s12 (5); BOOST_TEST(s12.value() == 5);
 OnStack s13 = boost::impl_ptr<OnStack>::null();

 // Check that implementation is allocated on the stack.
 BOOST_TEST((void*) &s11 == (void*) &*s11);
 BOOST_TEST(!s13);

 s11 = s12;          BOOST_TEST(s11.value() == 5);
 s11 = OnStack(6);   BOOST_TEST(s11.value() == 6);

Then, due to efficiency requirements or heap constraints, we might decide to switch from

 // std::allocator-based implementation allocation
 struct Book : boost::impl_ptr<Book>::copied { ... };

or

 // std::allocator-based implementation allocation
 struct Book : boost::impl_ptr<Book, impl_ptr_policy::copied> { ... };

to

 // Custom-allocator-based implementation allocation
 struct Book : boost::impl_ptr<Book, impl_ptr_policy::copied, my_allocator> { ... };

or to

 // Stack-based implementation allocation
 struct Book : boost::impl_ptr<Book, impl_ptr_policy::onstack, char[64]> { ... };

with minimal or no disruption to the existing code. 

Then, a restricted custom ['stack-based-implementation] policy (suggested by Giel van Schijndel) might be a further extension of impl_ptr_policy::onstack:

 template<typename impl_type, typename size_type>
 struct onstack_no_null : impl_ptr_policy::onstack<impl_type, size_type>
 {
     using impl_ptr_policy::onstack<impl_type, size_type>::onstack;

     // Disable the null-state construction.
     onstack_no_null(std::nullptr_t) =delete;
 };
 ...
 struct OnStack : boost::impl_ptr<OnStack, onstack_no_null, int[16]> { ... };

to make sure of the following:

 // The line below won't compile. OnStack does not have an uninitialized state.
 OnStack s13 = boost::impl_ptr<OnStack>::null();

[endsect] 

