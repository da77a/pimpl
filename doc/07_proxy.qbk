[section Pimpl the Proxy]
[section Internal-Data Management]

The conventional ['Pimpl] idiom implementations generally boil down to an opaque pointer to the internal implementation. So, it might be tempting to see ['Pimpl] as yet another variation of the smart-pointer idiom and to a certain degreee it might well be. However, the behavioral similarity is rather incidental than by design. ['Pimpl] is first and foremost a proxy

* advertising the external interface and 
* hiding and managing the internal implementation. 

When the family of smart-pointer classes (['std::unique_ptr], ['std::shared_ptr] and the like) take good care managing objects ['after] they are ['explicitly] created, ['Pimpl] fully encapsulates and automates the internal-data management. 

That is reflected in the ['Pimpl]-based class deployment pattern. For our ['Book] class instead of the smart-pointer style: 

 // Incorrect Pimpl deployment
 Book::Book(string const& title, string const& author)
 :
    pimpl_type(new pimpl<Book>::implementation(title, author))
 {}
 
we write:

 // Correct Pimpl deployment
 Book::Book(string const& title, string const& author)
 :
    pimpl_type(title, author)
 {} 
 
All arguments passed to the ['pimpl_type] are forwarded to the corresponding ['pimpl<Book>::implementation] constructor. Consequently, the respective ['Book] constructor fails to compile if a suitable ['pimpl<Book>::implementation] constructor is not found. 

That ['perfect-forwarding] mechanism is generic and works for the default constructor as well. That is, 

 Book::Book() {}
 
or the same but explicit  
 
 Book::Book() : pimpl_type() {}
 
will try calling ['pimpl<Book>::implementation::implementation()] and will fail to compile if there is no such.

[endsect]
[section Deep Const ]

TODO

In C/C++ ['const] is not deep but shallow:

 std::shared_ptr<Foo> const foo = std::make_shared<Foo>(args); // Const foo
 ...
 foo->modify(); // Modifying foo's undelying data.

With Pimpl being a proxy it preserves the constness:

 Book const book = ...
 ...
 book

[endsect]
[endsect]

