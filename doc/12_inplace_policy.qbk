[section In-Place-Implementation Policy]

 ...
 using policy = impl_ptr_policy;

 struct InPlace : boost::impl_ptr<InPlace, policy::inplace, policy::storage<64>> { ... };

Then ['InPlace] could be used no differently from other ['Pimpl]-based classes:

 InPlace s11 (3); BOOST_TEST(s11.value() == 3);
 InPlace s12 (5); BOOST_TEST(s12.value() == 5);
 InPlace s13 = boost::impl_ptr<InPlace>::null();

 // Check that implementation is allocated on the stack.
 BOOST_TEST((void*) &s11 == (void*) &*s11);
 BOOST_TEST(!s13);

 s11 = s12;          BOOST_TEST(s11.value() == 5);
 s11 = InPlace(6);   BOOST_TEST(s11.value() == 6);

Then, due to efficiency requirements or heap constraints, we might decide to switch from

 // std::allocator-based implementation allocation
 struct Book : boost::impl_ptr<Book>::copied { ... };

or

 // std::allocator-based implementation allocation
 struct Book : boost::impl_ptr<Book, policy::copied> { ... };

to

 // Custom-allocator-based implementation allocation
 struct Book : boost::impl_ptr<Book, policy::copied, my_allocator> { ... };

and then to

 // Stack-based implementation allocation
 struct Book : boost::impl_ptr<Book, policy::inplace, policy::storage<64>> { ... };

with minimal or no disruption to the existing code. 

Then, a restricted custom policy (suggested by Giel van Schijndel) might be a further extension of policy::inplace:

 template<typename impl_type, typename size_type>
 struct inplace_no_null : policy::inplace<impl_type, size_type>
 {
     using policy::inplace<impl_type, size_type>::inplace;

     // Disable the null-state construction.
     inplace_no_null(std::nullptr_t) =delete;
 };
 ...
 struct InPlace : boost::impl_ptr<InPlace, inplace_no_null, policy::storage<64>> { ... };

to make sure of the following:

 // The line below won't compile. InPlace does not have an uninitialized state.
 InPlace s13 = boost::impl_ptr<InPlace>::null();

[endsect] 

