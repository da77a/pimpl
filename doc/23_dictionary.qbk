[section Extendible Unique-Entry Collection]

The implementation file:

 using   All = std::map<std::string, Book>;
 using Mutex = boost::mutex;
 using  Lock = boost::mutex::scoped_lock;

 Book::Book(std::string const& title) : impl_ptr_type(null())
 {
    static Mutex mutex;
    static All   books;
    Lock          lock (mutex);
    auto        result = books.emplace(title, null());
    Book&         book = result.first->second;

    if (result.second)
        book.emplace(args);

    *this = book;
 }

[endsect]
[section Non-Extendible Unique-Entry Collection]

The implementation file:

 Book::Book(string const& title) : impl_ptr_type(null())
 {
    static Mutex mutex;
    static All   books;
    Lock          lock (mutex);
    auto         found = books.find(title);
    
    // If the title found, return it.
    // Otherwise, return an invalid book.
    if (found != books.end()) *this = found->second;
 }

[endsect]
