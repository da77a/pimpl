[section Internal (Implementation-Only) Run-Time Polymorphism]

For details and explanations see the ['Non-Virtual Interface] idiom in [link 11 \[11\]] and Rule #39 in [link 12 \[12\]].

 struct Book : impl_ptr<Book>::shared // The public interface class is not virtual
 {
    Book(args);
    
    string const&  title() const;
    string const& author() const;
 };

 template<> struct impl_ptr<Book>::implementation
 {
    implementation(args) {...}

    virtual ~implementation() {...}
 }

 struct Implementation1 : impl_ptr<Book>::implementation
 {
    Implementation1() : implementation(args) { ... }
 };

 struct Implementation2 : impl_ptr<Book>::implementation
 {
    Implementation2() : implementation(args) { ... }
 };

 Book::Book(parameters) : base_type(null())
 {
    some_condition ? emplace<Implementation1>(args) : emplace<Implementation2>(args);
 }

[endsect]
